plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'groovy'
}

group = 'com.blastingconcept'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '9'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springBootAdminVersion', "2.2.1")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'de.codecentric:spring-boot-admin-starter-client'
	compile 'javax.xml.bind:jaxb-api:2.3.1'
	compileOnly 'org.projectlombok:lombok'
	compile 'io.jsonwebtoken:jjwt-api:0.10.7'
	runtime 'io.jsonwebtoken:jjwt-impl:0.10.7',
			// Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
			//'org.bouncycastle:bcprov-jdk15on:1.60',
			'io.jsonwebtoken:jjwt-jackson:0.10.7'
	annotationProcessor 'org.projectlombok:lombok'
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'io.projectreactor:reactor-test'

	compile "org.codehaus.groovy:groovy-all:2.5.8"
	testCompile platform("org.spockframework:spock-bom:2.0-M1-groovy-2.5")
	testCompile "org.spockframework:spock-core"
	testCompile "org.spockframework:spock-junit4"

}

dependencyManagement {
	imports {
		mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
	}
}

test {
	systemProperties project.properties.subMap(["integrationTest"])
	useJUnitPlatform()
}

jar {
	manifest {
		attributes "Main-Class": "org.blastingconcept.devcon.DevconApplication"
	}

	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}
}
